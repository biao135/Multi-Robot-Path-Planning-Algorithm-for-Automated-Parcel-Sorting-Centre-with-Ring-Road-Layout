using System;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using TMPro;

public class CentralSystem : MonoBehaviour
{
    [SerializeField]
    private GameObject intersection;
    [SerializeField]
    private GameObject left;
    [SerializeField]
    private GameObject right;
    [SerializeField]
    private GameObject up;
    [SerializeField]
    private GameObject down;
    [SerializeField]
    private GameObject curve;
    [SerializeField]
    private GameObject pickup;
    [SerializeField]
    private GameObject dropoff;
    [SerializeField]
    private GameObject charging;
    [SerializeField]
    private GameObject notused;
    [SerializeField]
    private GameObject entrance;
    [SerializeField]
    private GameObject exit;
    [SerializeField]
    private GameObject robot;
    [SerializeField]
    private GameObject throughputCounterObject;
    private TextMeshPro throughputCounter;
    [SerializeField]
    private GameObject robotCounterObject;
    private TextMeshPro robotCounter;
    // Start is called before the first frame update

    void Start()
    {
        int mainThreadId = Thread.CurrentThread.ManagedThreadId;
        Thread mainThread = Thread.CurrentThread;
        mainThread.Priority = System.Threading.ThreadPriority.Highest;

        throughputCounter = throughputCounterObject.GetComponent<TMPro.TextMeshPro>();
        robotCounter = robotCounterObject.GetComponent<TMPro.TextMeshPro>();
        // Create Vertices
        // 0 = intersection
        // 1 = left
        // 2 = right
        // 3 = up
        // 4 = down
        // 5 = curve
        // 6 = pickup points
        // 7 = dropoff points
        // 8 = charging points
        // 9 = not used
        int[,] graph = new int[,] {
{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,7,7,7,7,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,9},
{9,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,9},
{9,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,9},
{9,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,8,8,8,8,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,6,3,4,9},
{9,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,9},
{9,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9}
        };

        // define ring road
        // 0 = not ring road
        // 1 = ring road
        // 2 = ring road exit
        // 3 = ring road entrance

        int[,] ringRoad = new int[,]{
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

        Server server = new Server(graph, ringRoad, throughputCounter, robotCounter);

        // create areas, top left point, bottom right point
        server.addArea(new Area(1, new int[]{71, 5}, new int[]{40, 36}, server));
        server.addArea(new Area(2, new int[]{71, 37}, new int[]{37, 71}, server));
        server.addArea(new Area(3, new int[]{36, 40}, new int[]{5, 71}, server));
        server.addArea(new Area(4, new int[]{39, 5}, new int[]{5, 39}, server));

        // add curve to to turn
        // robot self rotation = 90 degrees per sec, minimum 3 radius to make turn at full speed
        
        // // area 1
        // server.addCurve(0, new int[] {71, 2}, new int [] {74, 5}, new float [] {71, 5}, 180, 90, 3, false);
        // server.addCurve(1, new int[] {72, 1}, new int [] {75, 4}, new float [] {72, 4}, 180, 90, 3, false);

        // // area 2
        // server.addCurve(2, new int[] {74, 71}, new int [] {71, 74}, new float [] {71, 71}, 90, 0, 3, false);
        // server.addCurve(3, new int[] {75, 72}, new int [] {72, 75}, new float [] {72, 72}, 90, 0, 3, false);

        // // area 3
        // server.addCurve(4, new int[] {5, 74}, new int [] {2, 71}, new float [] {5, 71}, 360, 270, 3, false);
        // server.addCurve(5, new int[] {4, 75}, new int [] {1, 72}, new float [] {4, 72}, 360, 270, 3, false);

        // // area 4
        // server.addCurve(6, new int[] {2, 5}, new int [] {5, 2}, new float [] {5, 5}, 270, 180, 3, false);
        // server.addCurve(7, new int[] {1, 4}, new int [] {4, 1}, new float [] {4, 4}, 270, 180, 3, false);
       
        // // entrances and exits
        // // top =======================================================================================================================
        // // Area 1 exits (top)
        // server.addCurve(8, new int[] {74, 5}, new int [] {71, 8}, new float [] {71, 5}, 90, 0, 3, true);
        // server.addCurve(9, new int[] {74, 6}, new int [] {71, 9}, new float [] {71, 6}, 90, 0, 3, true);
        // server.addCurve(10, new int[] {74, 7}, new int [] {71, 10}, new float [] {71, 7}, 90, 0, 3, true);
        // server.addCurve(11, new int[] {74, 8}, new int [] {71, 11}, new float [] {71, 8}, 90, 0, 3, true);
        // server.addCurve(12, new int[] {74, 9}, new int [] {71, 12}, new float [] {71, 9}, 90, 0, 3, true);
        // server.addCurve(13, new int[] {74, 10}, new int [] {71, 13}, new float [] {71, 10}, 90, 0, 3, true);
        // server.addCurve(14, new int[] {74, 11}, new int [] {71, 14}, new float [] {71, 11}, 90, 0, 3, true);
        // server.addCurve(15, new int[] {74, 12}, new int [] {71, 15}, new float [] {71, 12}, 90, 0, 3, true);
        // server.addCurve(16, new int[] {74, 13}, new int [] {71, 16}, new float [] {71, 13}, 90, 0, 3, true);

        // // Area 1 entrances (top)
        // server.addCurve(17, new int[] {71, 17}, new int [] {74, 20}, new float [] {71, 20}, 180, 90, 3, true);
        // server.addCurve(18, new int[] {71, 18}, new int [] {74, 21}, new float [] {71, 21}, 180, 90, 3, true);
        // server.addCurve(19, new int[] {71, 19}, new int [] {74, 22}, new float [] {71, 22}, 180, 90, 3, true);
        // server.addCurve(20, new int[] {71, 20}, new int [] {74, 23}, new float [] {71, 23}, 180, 90, 3, true);
        // server.addCurve(21, new int[] {71, 21}, new int [] {74, 24}, new float [] {71, 24}, 180, 90, 3, true);
        // server.addCurve(22, new int[] {71, 22}, new int [] {74, 25}, new float [] {71, 25}, 180, 90, 3, true);
        // server.addCurve(23, new int[] {71, 23}, new int [] {74, 26}, new float [] {71, 26}, 180, 90, 3, true);
        // server.addCurve(24, new int[] {71, 24}, new int [] {74, 27}, new float [] {71, 27}, 180, 90, 3, true);
        // server.addCurve(25, new int[] {71, 25}, new int [] {74, 28}, new float [] {71, 28}, 180, 90, 3, true);
        // server.addCurve(26, new int[] {71, 26}, new int [] {74, 29}, new float [] {71, 29}, 180, 90, 3, true);
        // server.addCurve(27, new int[] {71, 27}, new int [] {74, 30}, new float [] {71, 30}, 180, 90, 3, true);
        // server.addCurve(28, new int[] {71, 28}, new int [] {74, 31}, new float [] {71, 31}, 180, 90, 3, true);
        // server.addCurve(29, new int[] {71, 29}, new int [] {74, 32}, new float [] {71, 32}, 180, 90, 3, true);
        // server.addCurve(30, new int[] {71, 30}, new int [] {74, 33}, new float [] {71, 33}, 180, 90, 3, true);
        // server.addCurve(31, new int[] {71, 31}, new int [] {74, 34}, new float [] {71, 34}, 180, 90, 3, true);
        // server.addCurve(32, new int[] {71, 32}, new int [] {74, 35}, new float [] {71, 35}, 180, 90, 3, true);
        // server.addCurve(33, new int[] {71, 33}, new int [] {74, 36}, new float [] {71, 36}, 180, 90, 3, true);
        // server.addCurve(34, new int[] {71, 34}, new int [] {74, 37}, new float [] {71, 37}, 180, 90, 3, true);

        // // Area 2 exits (top)
        // server.addCurve(35, new int[] {74, 38}, new int [] {71, 41}, new float [] {71, 38}, 90, 0, 3, true);
        // server.addCurve(36, new int[] {74, 39}, new int [] {71, 42}, new float [] {71, 39}, 90, 0, 3, true);
        // server.addCurve(37, new int[] {74, 40}, new int [] {71, 43}, new float [] {71, 40}, 90, 0, 3, true);
        // server.addCurve(38, new int[] {74, 41}, new int [] {71, 44}, new float [] {71, 41}, 90, 0, 3, true);
        // server.addCurve(39, new int[] {74, 42}, new int [] {71, 45}, new float [] {71, 42}, 90, 0, 3, true);
        // server.addCurve(40, new int[] {74, 43}, new int [] {71, 46}, new float [] {71, 43}, 90, 0, 3, true);
        // server.addCurve(41, new int[] {74, 44}, new int [] {71, 47}, new float [] {71, 44}, 90, 0, 3, true);
        // server.addCurve(42, new int[] {74, 45}, new int [] {71, 48}, new float [] {71, 45}, 90, 0, 3, true);
        // server.addCurve(43, new int[] {74, 46}, new int [] {71, 49}, new float [] {71, 46}, 90, 0, 3, true);
        // server.addCurve(44, new int[] {74, 47}, new int [] {71, 50}, new float [] {71, 47}, 90, 0, 3, true);
        // server.addCurve(45, new int[] {74, 48}, new int [] {71, 51}, new float [] {71, 48}, 90, 0, 3, true);
        // server.addCurve(46, new int[] {74, 49}, new int [] {71, 52}, new float [] {71, 49}, 90, 0, 3, true);
        // server.addCurve(47, new int[] {74, 50}, new int [] {71, 53}, new float [] {71, 50}, 90, 0, 3, true);
        // server.addCurve(48, new int[] {74, 51}, new int [] {71, 54}, new float [] {71, 51}, 90, 0, 3, true);
        // server.addCurve(49, new int[] {74, 52}, new int [] {71, 55}, new float [] {71, 52}, 90, 0, 3, true);
        // server.addCurve(50, new int[] {74, 53}, new int [] {71, 56}, new float [] {71, 53}, 90, 0, 3, true);
        // server.addCurve(51, new int[] {74, 54}, new int [] {71, 57}, new float [] {71, 54}, 90, 0, 3, true);
        // server.addCurve(52, new int[] {74, 55}, new int [] {71, 58}, new float [] {71, 55}, 90, 0, 3, true);
        // server.addCurve(53, new int[] {74, 56}, new int [] {71, 59}, new float [] {71, 56}, 90, 0, 3, true);
        
        // // Area 2 Entrances (top)
        // server.addCurve(54, new int[] {71, 60}, new int [] {74, 63}, new float [] {71, 63}, 180, 90, 3, true);
        // server.addCurve(55, new int[] {71, 61}, new int [] {74, 64}, new float [] {71, 64}, 180, 90, 3, true);
        // server.addCurve(56, new int[] {71, 62}, new int [] {74, 65}, new float [] {71, 65}, 180, 90, 3, true);
        // server.addCurve(57, new int[] {71, 63}, new int [] {74, 66}, new float [] {71, 66}, 180, 90, 3, true);
        // server.addCurve(58, new int[] {71, 64}, new int [] {74, 67}, new float [] {71, 67}, 180, 90, 3, true);
        // server.addCurve(59, new int[] {71, 65}, new int [] {74, 68}, new float [] {71, 68}, 180, 90, 3, true);
        // server.addCurve(60, new int[] {71, 66}, new int [] {74, 69}, new float [] {71, 69}, 180, 90, 3, true);
        // server.addCurve(61, new int[] {71, 67}, new int [] {74, 70}, new float [] {71, 70}, 180, 90, 3, true);
        // server.addCurve(62, new int[] {71, 68}, new int [] {74, 71}, new float [] {71, 71}, 180, 90, 3, true);

        // // right =======================================================================================================================
        // // Area 2 Entrances (right)
        // server.addCurve(63, new int[] {71, 71}, new int [] {68, 74}, new float [] {68, 71}, 90, 0, 3, true);
        // server.addCurve(64, new int[] {70, 71}, new int [] {67, 74}, new float [] {67, 71}, 90, 0, 3, true);
        // server.addCurve(65, new int[] {69, 71}, new int [] {66, 74}, new float [] {66, 71}, 90, 0, 3, true);
        // server.addCurve(66, new int[] {68, 71}, new int [] {65, 74}, new float [] {65, 71}, 90, 0, 3, true);
        // server.addCurve(67, new int[] {67, 71}, new int [] {64, 74}, new float [] {64, 71}, 90, 0, 3, true);
        // server.addCurve(68, new int[] {66, 71}, new int [] {63, 74}, new float [] {63, 71}, 90, 0, 3, true);
        // server.addCurve(69, new int[] {65, 71}, new int [] {62, 74}, new float [] {62, 71}, 90, 0, 3, true);
        // server.addCurve(70, new int[] {64, 71}, new int [] {61, 74}, new float [] {61, 71}, 90, 0, 3, true);
        // server.addCurve(71, new int[] {63, 71}, new int [] {60, 74}, new float [] {60, 71}, 90, 0, 3, true);
        // server.addCurve(72, new int[] {62, 71}, new int [] {59, 74}, new float [] {59, 71}, 90, 0, 3, true);

        // // Area 2 Exits (right)
        // server.addCurve(73, new int[] {58, 74}, new int [] {55, 71}, new float [] {58, 71}, 360, 270, 3, true);
        // server.addCurve(74, new int[] {57, 74}, new int [] {54, 71}, new float [] {57, 71}, 360, 270, 3, true);
        // server.addCurve(75, new int[] {56, 74}, new int [] {53, 71}, new float [] {56, 71}, 360, 270, 3, true);
        // server.addCurve(76, new int[] {55, 74}, new int [] {52, 71}, new float [] {55, 71}, 360, 270, 3, true);
        // server.addCurve(77, new int[] {54, 74}, new int [] {51, 71}, new float [] {54, 71}, 360, 270, 3, true);
        // server.addCurve(78, new int[] {53, 74}, new int [] {50, 71}, new float [] {53, 71}, 360, 270, 3, true);
        // server.addCurve(79, new int[] {52, 74}, new int [] {49, 71}, new float [] {52, 71}, 360, 270, 3, true);
        // server.addCurve(80, new int[] {51, 74}, new int [] {48, 71}, new float [] {51, 71}, 360, 270, 3, true);
        // server.addCurve(81, new int[] {50, 74}, new int [] {47, 71}, new float [] {50, 71}, 360, 270, 3, true);
        // server.addCurve(82, new int[] {49, 74}, new int [] {46, 71}, new float [] {49, 71}, 360, 270, 3, true);
        // server.addCurve(83, new int[] {48, 74}, new int [] {45, 71}, new float [] {48, 71}, 360, 270, 3, true);
        // server.addCurve(84, new int[] {47, 74}, new int [] {44, 71}, new float [] {47, 71}, 360, 270, 3, true);
        // server.addCurve(85, new int[] {46, 74}, new int [] {43, 71}, new float [] {46, 71}, 360, 270, 3, true);
        // server.addCurve(86, new int[] {45, 74}, new int [] {42, 71}, new float [] {45, 71}, 360, 270, 3, true);
        // server.addCurve(87, new int[] {44, 74}, new int [] {41, 71}, new float [] {44, 71}, 360, 270, 3, true);
        // server.addCurve(88, new int[] {43, 74}, new int [] {40, 71}, new float [] {43, 71}, 360, 270, 3, true);
        // server.addCurve(89, new int[] {42, 74}, new int [] {39, 71}, new float [] {42, 71}, 360, 270, 3, true);

        // // Area 3 Entrances (right)
        // server.addCurve(90, new int[] {38, 71}, new int [] {35, 74}, new float [] {35, 71}, 90, 0, 3, true);
        // server.addCurve(91, new int[] {37, 71}, new int [] {34, 74}, new float [] {34, 71}, 90, 0, 3, true);
        // server.addCurve(92, new int[] {36, 71}, new int [] {33, 74}, new float [] {33, 71}, 90, 0, 3, true);
        // server.addCurve(93, new int[] {35, 71}, new int [] {32, 74}, new float [] {32, 71}, 90, 0, 3, true);
        // server.addCurve(94, new int[] {34, 71}, new int [] {31, 74}, new float [] {31, 71}, 90, 0, 3, true);
        // server.addCurve(95, new int[] {33, 71}, new int [] {30, 74}, new float [] {30, 71}, 90, 0, 3, true);
        // server.addCurve(96, new int[] {32, 71}, new int [] {29, 74}, new float [] {29, 71}, 90, 0, 3, true);
        // server.addCurve(97, new int[] {31, 71}, new int [] {28, 74}, new float [] {28, 71}, 90, 0, 3, true);
        // server.addCurve(98, new int[] {30, 71}, new int [] {27, 74}, new float [] {27, 71}, 90, 0, 3, true);
        // server.addCurve(99, new int[] {29, 71}, new int [] {26, 74}, new float [] {26, 71}, 90, 0, 3, true);
        // server.addCurve(100, new int[] {28, 71}, new int [] {25, 74}, new float [] {25, 71}, 90, 0, 3, true);
        // server.addCurve(101, new int[] {27, 71}, new int [] {24, 74}, new float [] {24, 71}, 90, 0, 3, true);
        // server.addCurve(102, new int[] {26, 71}, new int [] {23, 74}, new float [] {23, 71}, 90, 0, 3, true);
        // server.addCurve(103, new int[] {25, 71}, new int [] {22, 74}, new float [] {22, 71}, 90, 0, 3, true);
        // server.addCurve(104, new int[] {24, 71}, new int [] {21, 74}, new float [] {21, 71}, 90, 0, 3, true);
        // server.addCurve(105, new int[] {23, 71}, new int [] {20, 74}, new float [] {20, 71}, 90, 0, 3, true);
        // server.addCurve(106, new int[] {22, 71}, new int [] {19, 74}, new float [] {19, 71}, 90, 0, 3, true);
        // server.addCurve(107, new int[] {21, 71}, new int [] {18, 74}, new float [] {18, 71}, 90, 0, 3, true);

        // // Area 3 Exit (right)
        // server.addCurve(108, new int[] {17, 74}, new int [] {14, 71}, new float [] {17, 71}, 360, 270, 3, true);
        // server.addCurve(109, new int[] {16, 74}, new int [] {13, 71}, new float [] {16, 71}, 360, 270, 3, true);
        // server.addCurve(110, new int[] {15, 74}, new int [] {12, 71}, new float [] {15, 71}, 360, 270, 3, true);
        // server.addCurve(111, new int[] {14, 74}, new int [] {11, 71}, new float [] {14, 71}, 360, 270, 3, true);
        // server.addCurve(112, new int[] {13, 74}, new int [] {10, 71}, new float [] {13, 71}, 360, 270, 3, true);
        // server.addCurve(113, new int[] {12, 74}, new int [] {9, 71}, new float [] {12, 71}, 360, 270, 3, true);
        // server.addCurve(114, new int[] {11, 74}, new int [] {8, 71}, new float [] {11, 71}, 360, 270, 3, true);
        // server.addCurve(115, new int[] {10, 74}, new int [] {7, 71}, new float [] {10, 71}, 360, 270, 3, true);
        // server.addCurve(116, new int[] {9, 74}, new int [] {6, 71}, new float [] {9, 71}, 360, 270, 3, true);
        // server.addCurve(117, new int[] {8, 74}, new int [] {5, 71}, new float [] {8, 71}, 360, 270, 3, true);

        // // bottom =======================================================================================================================
        // // Area 3 Exit (bottom)
        // server.addCurve(118, new int[] {2, 71}, new int [] {5, 68}, new float [] {5, 71}, 270, 180, 3, true);
        // server.addCurve(119, new int[] {2, 70}, new int [] {5, 67}, new float [] {5, 70}, 270, 180, 3, true);
        // server.addCurve(120, new int[] {2, 69}, new int [] {5, 66}, new float [] {5, 69}, 270, 180, 3, true);
        // server.addCurve(121, new int[] {2, 68}, new int [] {5, 65}, new float [] {5, 68}, 270, 180, 3, true);
        // server.addCurve(122, new int[] {2, 67}, new int [] {5, 64}, new float [] {5, 67}, 270, 180, 3, true);
        // server.addCurve(123, new int[] {2, 66}, new int [] {5, 63}, new float [] {5, 66}, 270, 180, 3, true);
        // server.addCurve(124, new int[] {2, 65}, new int [] {5, 62}, new float [] {5, 65}, 270, 180, 3, true);
        // server.addCurve(125, new int[] {2, 64}, new int [] {5, 61}, new float [] {5, 64}, 270, 180, 3, true);
        // server.addCurve(126, new int[] {2, 63}, new int [] {5, 60}, new float [] {5, 63}, 270, 180, 3, true);

        // // Area 3 Entrances (bottom)
        // server.addCurve(127, new int[] {5, 59}, new int [] {2, 56}, new float [] {5, 56}, 360, 270, 3, true);
        // server.addCurve(128, new int[] {5, 58}, new int [] {2, 55}, new float [] {5, 55}, 360, 270, 3, true);
        // server.addCurve(129, new int[] {5, 57}, new int [] {2, 54}, new float [] {5, 54}, 360, 270, 3, true);
        // server.addCurve(130, new int[] {5, 56}, new int [] {2, 53}, new float [] {5, 53}, 360, 270, 3, true);
        // server.addCurve(131, new int[] {5, 55}, new int [] {2, 52}, new float [] {5, 52}, 360, 270, 3, true);
        // server.addCurve(132, new int[] {5, 54}, new int [] {2, 51}, new float [] {5, 51}, 360, 270, 3, true);
        // server.addCurve(133, new int[] {5, 53}, new int [] {2, 50}, new float [] {5, 50}, 360, 270, 3, true);
        // server.addCurve(134, new int[] {5, 52}, new int [] {2, 49}, new float [] {5, 49}, 360, 270, 3, true);
        // server.addCurve(135, new int[] {5, 51}, new int [] {2, 48}, new float [] {5, 48}, 360, 270, 3, true);
        // server.addCurve(136, new int[] {5, 50}, new int [] {2, 47}, new float [] {5, 47}, 360, 270, 3, true);
        // server.addCurve(137, new int[] {5, 49}, new int [] {2, 46}, new float [] {5, 46}, 360, 270, 3, true);
        // server.addCurve(138, new int[] {5, 48}, new int [] {2, 45}, new float [] {5, 45}, 360, 270, 3, true);
        // server.addCurve(139, new int[] {5, 47}, new int [] {2, 44}, new float [] {5, 44}, 360, 270, 3, true);
        // server.addCurve(140, new int[] {5, 46}, new int [] {2, 43}, new float [] {5, 43}, 360, 270, 3, true);
        // server.addCurve(141, new int[] {5, 45}, new int [] {2, 42}, new float [] {5, 42}, 360, 270, 3, true);
        // server.addCurve(142, new int[] {5, 44}, new int [] {2, 41}, new float [] {5, 41}, 360, 270, 3, true);
        // server.addCurve(143, new int[] {5, 43}, new int [] {2, 40}, new float [] {5, 40}, 360, 270, 3, true);
        // server.addCurve(144, new int[] {5, 42}, new int [] {2, 39}, new float [] {5, 39}, 360, 270, 3, true);

        // // Area 4 Exits (bottom)
        // server.addCurve(145, new int[] {2, 38}, new int [] {5, 35}, new float [] {5, 38}, 270, 180, 3, true);
        // server.addCurve(146, new int[] {2, 37}, new int [] {5, 34}, new float [] {5, 37}, 270, 180, 3, true);
        // server.addCurve(147, new int[] {2, 36}, new int [] {5, 33}, new float [] {5, 36}, 270, 180, 3, true);
        // server.addCurve(148, new int[] {2, 35}, new int [] {5, 32}, new float [] {5, 35}, 270, 180, 3, true);
        // server.addCurve(149, new int[] {2, 34}, new int [] {5, 31}, new float [] {5, 34}, 270, 180, 3, true);
        // server.addCurve(150, new int[] {2, 33}, new int [] {5, 30}, new float [] {5, 33}, 270, 180, 3, true);
        // server.addCurve(151, new int[] {2, 32}, new int [] {5, 29}, new float [] {5, 32}, 270, 180, 3, true);
        // server.addCurve(152, new int[] {2, 31}, new int [] {5, 28}, new float [] {5, 31}, 270, 180, 3, true);
        // server.addCurve(153, new int[] {2, 30}, new int [] {5, 27}, new float [] {5, 30}, 270, 180, 3, true);
        // server.addCurve(154, new int[] {2, 29}, new int [] {5, 26}, new float [] {5, 29}, 270, 180, 3, true);
        // server.addCurve(155, new int[] {2, 28}, new int [] {5, 25}, new float [] {5, 28}, 270, 180, 3, true);
        // server.addCurve(156, new int[] {2, 27}, new int [] {5, 24}, new float [] {5, 27}, 270, 180, 3, true);
        // server.addCurve(157, new int[] {2, 26}, new int [] {5, 23}, new float [] {5, 26}, 270, 180, 3, true);
        // server.addCurve(158, new int[] {2, 25}, new int [] {5, 22}, new float [] {5, 25}, 270, 180, 3, true);
        // server.addCurve(159, new int[] {2, 24}, new int [] {5, 21}, new float [] {5, 24}, 270, 180, 3, true);
        // server.addCurve(160, new int[] {2, 23}, new int [] {5, 20}, new float [] {5, 23}, 270, 180, 3, true);
        // server.addCurve(161, new int[] {2, 22}, new int [] {5, 19}, new float [] {5, 22}, 270, 180, 3, true);
        // server.addCurve(162, new int[] {2, 21}, new int [] {5, 18}, new float [] {5, 21}, 270, 180, 3, true);
        // server.addCurve(163, new int[] {2, 20}, new int [] {5, 17}, new float [] {5, 20}, 270, 180, 3, true);

        // // Area 4 Entrances (bottom)
        // server.addCurve(164, new int[] {5, 16}, new int [] {2, 13}, new float [] {5, 13}, 360, 270, 3, true);
        // server.addCurve(165, new int[] {5, 15}, new int [] {2, 12}, new float [] {5, 12}, 360, 270, 3, true);
        // server.addCurve(166, new int[] {5, 14}, new int [] {2, 11}, new float [] {5, 11}, 360, 270, 3, true);
        // server.addCurve(167, new int[] {5, 13}, new int [] {2, 10}, new float [] {5, 10}, 360, 270, 3, true);
        // server.addCurve(168, new int[] {5, 12}, new int [] {2, 9}, new float [] {5, 9}, 360, 270, 3, true);
        // server.addCurve(169, new int[] {5, 11}, new int [] {2, 8}, new float [] {5, 8}, 360, 270, 3, true);
        // server.addCurve(170, new int[] {5, 10}, new int [] {2, 7}, new float [] {5, 7}, 360, 270, 3, true);
        // server.addCurve(171, new int[] {5, 9}, new int [] {2, 6}, new float [] {5, 6}, 360, 270, 3, true);
        // server.addCurve(172, new int[] {5, 8}, new int [] {2, 5}, new float [] {5, 5}, 360, 270, 3, true);
        
        // // left =======================================================================================================================
        // // Area 4 Entrances (left)
        // server.addCurve(173, new int[] {5, 5}, new int [] {8, 2}, new float [] {8, 5}, 270, 180, 3, true);
        // server.addCurve(174, new int[] {6, 5}, new int [] {9, 2}, new float [] {9, 5}, 270, 180, 3, true);
        // server.addCurve(175, new int[] {7, 5}, new int [] {10, 2}, new float [] {10, 5}, 270, 180, 3, true);
        // server.addCurve(176, new int[] {8, 5}, new int [] {11, 2}, new float [] {11, 5}, 270, 180, 3, true);
        // server.addCurve(177, new int[] {9, 5}, new int [] {12, 2}, new float [] {12, 5}, 270, 180, 3, true);
        // server.addCurve(178, new int[] {10, 5}, new int [] {13, 2}, new float [] {13, 5}, 270, 180, 3, true);
        // server.addCurve(179, new int[] {11, 5}, new int [] {14, 2}, new float [] {14, 5}, 270, 180, 3, true);
        // server.addCurve(180, new int[] {12, 5}, new int [] {15, 2}, new float [] {15, 5}, 270, 180, 3, true);
        // server.addCurve(181, new int[] {13, 5}, new int [] {16, 2}, new float [] {16, 5}, 270, 180, 3, true);
        // server.addCurve(182, new int[] {14, 5}, new int [] {17, 2}, new float [] {17, 5}, 270, 180, 3, true);

        // // Area 4 Exits (left)
        // server.addCurve(183, new int[] {18, 2}, new int [] {21, 5}, new float [] {18, 5}, 180, 90, 3, true);
        // server.addCurve(184, new int[] {19, 2}, new int [] {22, 5}, new float [] {19, 5}, 180, 90, 3, true);
        // server.addCurve(185, new int[] {20, 2}, new int [] {23, 5}, new float [] {20, 5}, 180, 90, 3, true);
        // server.addCurve(186, new int[] {21, 2}, new int [] {24, 5}, new float [] {21, 5}, 180, 90, 3, true);
        // server.addCurve(187, new int[] {22, 2}, new int [] {25, 5}, new float [] {22, 5}, 180, 90, 3, true);
        // server.addCurve(188, new int[] {23, 2}, new int [] {26, 5}, new float [] {23, 5}, 180, 90, 3, true);
        // server.addCurve(189, new int[] {24, 2}, new int [] {27, 5}, new float [] {24, 5}, 180, 90, 3, true);
        // server.addCurve(190, new int[] {25, 2}, new int [] {28, 5}, new float [] {25, 5}, 180, 90, 3, true);
        // server.addCurve(191, new int[] {26, 2}, new int [] {29, 5}, new float [] {26, 5}, 180, 90, 3, true);
        // server.addCurve(192, new int[] {27, 2}, new int [] {30, 5}, new float [] {27, 5}, 180, 90, 3, true);
        // server.addCurve(193, new int[] {28, 2}, new int [] {31, 5}, new float [] {28, 5}, 180, 90, 3, true);
        // server.addCurve(194, new int[] {29, 2}, new int [] {32, 5}, new float [] {29, 5}, 180, 90, 3, true);
        // server.addCurve(195, new int[] {30, 2}, new int [] {33, 5}, new float [] {30, 5}, 180, 90, 3, true);
        // server.addCurve(196, new int[] {31, 2}, new int [] {34, 5}, new float [] {31, 5}, 180, 90, 3, true);
        // server.addCurve(197, new int[] {32, 2}, new int [] {35, 5}, new float [] {32, 5}, 180, 90, 3, true);
        // server.addCurve(198, new int[] {33, 2}, new int [] {36, 5}, new float [] {33, 5}, 180, 90, 3, true);
        // server.addCurve(199, new int[] {34, 2}, new int [] {37, 5}, new float [] {34, 5}, 180, 90, 3, true);

        // // Area 1 Entrances (left)
        // server.addCurve(200, new int[] {38, 5}, new int [] {41, 2}, new float [] {41, 5}, 270, 180, 3, true);
        // server.addCurve(201, new int[] {39, 5}, new int [] {42, 2}, new float [] {42, 5}, 270, 180, 3, true);
        // server.addCurve(202, new int[] {40, 5}, new int [] {43, 2}, new float [] {43, 5}, 270, 180, 3, true);
        // server.addCurve(203, new int[] {41, 5}, new int [] {44, 2}, new float [] {44, 5}, 270, 180, 3, true);
        // server.addCurve(204, new int[] {42, 5}, new int [] {45, 2}, new float [] {45, 5}, 270, 180, 3, true);
        // server.addCurve(205, new int[] {43, 5}, new int [] {46, 2}, new float [] {46, 5}, 270, 180, 3, true);
        // server.addCurve(206, new int[] {44, 5}, new int [] {47, 2}, new float [] {47, 5}, 270, 180, 3, true);
        // server.addCurve(207, new int[] {45, 5}, new int [] {48, 2}, new float [] {48, 5}, 270, 180, 3, true);
        // server.addCurve(208, new int[] {46, 5}, new int [] {49, 2}, new float [] {49, 5}, 270, 180, 3, true);
        // server.addCurve(209, new int[] {47, 5}, new int [] {50, 2}, new float [] {50, 5}, 270, 180, 3, true);
        // server.addCurve(210, new int[] {48, 5}, new int [] {51, 2}, new float [] {51, 5}, 270, 180, 3, true);
        // server.addCurve(211, new int[] {49, 5}, new int [] {52, 2}, new float [] {52, 5}, 270, 180, 3, true);
        // server.addCurve(212, new int[] {50, 5}, new int [] {53, 2}, new float [] {53, 5}, 270, 180, 3, true);
        // server.addCurve(213, new int[] {51, 5}, new int [] {54, 2}, new float [] {54, 5}, 270, 180, 3, true);
        // server.addCurve(214, new int[] {52, 5}, new int [] {55, 2}, new float [] {55, 5}, 270, 180, 3, true);
        // server.addCurve(215, new int[] {53, 5}, new int [] {56, 2}, new float [] {56, 5}, 270, 180, 3, true);
        // server.addCurve(216, new int[] {54, 5}, new int [] {57, 2}, new float [] {57, 5}, 270, 180, 3, true);
        // server.addCurve(217, new int[] {55, 5}, new int [] {58, 2}, new float [] {58, 5}, 270, 180, 3, true);

        // // Area 1 Exits (left)
        // server.addCurve(218, new int[] {59, 2}, new int [] {62, 5}, new float [] {59, 5}, 180, 90, 3, true);
        // server.addCurve(219, new int[] {60, 2}, new int [] {63, 5}, new float [] {60, 5}, 180, 90, 3, true);
        // server.addCurve(220, new int[] {61, 2}, new int [] {64, 5}, new float [] {61, 5}, 180, 90, 3, true);
        // server.addCurve(221, new int[] {62, 2}, new int [] {65, 5}, new float [] {62, 5}, 180, 90, 3, true);
        // server.addCurve(222, new int[] {63, 2}, new int [] {66, 5}, new float [] {63, 5}, 180, 90, 3, true);
        // server.addCurve(223, new int[] {64, 2}, new int [] {67, 5}, new float [] {64, 5}, 180, 90, 3, true);
        // server.addCurve(224, new int[] {65, 2}, new int [] {68, 5}, new float [] {65, 5}, 180, 90, 3, true);
        // server.addCurve(225, new int[] {66, 2}, new int [] {69, 5}, new float [] {66, 5}, 180, 90, 3, true);
        // server.addCurve(226, new int[] {67, 2}, new int [] {70, 5}, new float [] {67, 5}, 180, 90, 3, true);
        // server.addCurve(227, new int[] {68, 2}, new int [] {71, 5}, new float [] {68, 5}, 180, 90, 3, true);

        server.initializeOuterRingRoad();

        // set entrances and exits to use
        // type:
        // 1: set exit
        // 2: set entrance

        // task:
        // 1: pick up or charging
        // 2: drop off

        //--------------------------------------------------
        //top
        // server.setExitEntrances(1, 1, 1, 8, 16);
        // server.setExitEntrances(1, 2, 2, 17, 34);
        // server.setExitEntrances(2, 1, 1, 35, 53);
        // server.setExitEntrances(2, 2, 2, 54, 62);

        // //--------------------------------------------------
        // //right

        // server.setExitEntrances(2, 2, 2, 63, 72);

        // server.setExitEntrances(2, 1, 2, 73, 89);
        // server.setExitEntrances(3, 1, 2, 73, 89);
        // server.setExitEntrances(2, 2, 1, 90, 107);
        // server.setExitEntrances(3, 2, 1, 90, 107);

        // server.setExitEntrances(3, 1, 1, 108, 117);

        // //--------------------------------------------------
        // //bottom

        // server.setExitEntrances(3, 1, 1, 118, 126);
        // server.setExitEntrances(3, 2, 2, 127, 144);
        // server.setExitEntrances(4, 1, 1, 145, 163);
        // server.setExitEntrances(4, 2, 2, 164, 172);

        // //--------------------------------------------------
        // // left

        // server.setExitEntrances(4, 2, 2, 173, 182);

        // server.setExitEntrances(4, 1, 2, 183, 199);
        // server.setExitEntrances(1, 1, 2, 183, 199);
        // server.setExitEntrances(4, 2, 1, 200, 217);
        // server.setExitEntrances(1, 2, 1, 200, 217);

        // server.setExitEntrances(1, 1, 1, 218, 227);
        //--------------------------------------------------


        int[] shape = server.getShape();

        //display map tile images
        for (int i = 0; i <= shape[0]; i++){
            for (int j = 0; j <= shape[1]; j++){
                switch(graph[i,j]) 
                {
                    case 0:
                        Instantiate(intersection, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 1:
                        Instantiate(left, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 2:
                        Instantiate(right, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 3:
                        Instantiate(up, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 4:
                        Instantiate(down, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 5:
                        Instantiate(curve, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 6:
                        Instantiate(pickup, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 7:
                        Instantiate(dropoff, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 8:
                        Instantiate(charging, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    case 9:
                        Instantiate(notused, new Vector3(j, i, -10), Quaternion.identity);
                        break;
                    default:
                        break;
                }

                switch(ringRoad[i,j])
                {
                    case 2:
                        Instantiate(exit, new Vector3(j, i, -11), Quaternion.identity);
                        break;
                    case 3:
                        Instantiate(entrance, new Vector3(j, i, -11), Quaternion.identity);
                        break;
                    default:
                        break;
                }
            }
        }
        
        // server.findVertex(new int[] {5, 5}).setIsOuterRingRoadCorner(true);
        // server.findVertex(new int[] {5, 71}).setIsOuterRingRoadCorner(true);
        // server.findVertex(new int[] {71, 5}).setIsOuterRingRoadCorner(true);
        // server.findVertex(new int[] {71, 71}).setIsOuterRingRoadCorner(true);


        int[,] spawnSpots = new int[,]{
            // {67, 14}, {67, 15}, {67, 16}, {67, 17}, {67, 26}, 
            // {67, 27}, {67, 28}, {67, 29}, {67, 41}, {67, 42}, 
            // {67, 43}, {67, 44}, {67, 53}, {67, 54}, {67, 55}, 
            // {67, 56}, {67, 65}, {67, 66}, {67, 67}, {67, 68},

            // {66, 8},  {66, 9},  {66, 10}, {66, 11}, {66, 20}, 
            // {66, 21}, {66, 22}, {66, 23}, {66, 32}, {66, 33}, 
            // {66, 34}, {66, 35}, {66, 47}, {66, 48}, {66, 49}, 
            // {66, 50}, {66, 59}, {66, 60}, {66, 61}, {66, 62},



            // // {64, 14}, {64, 15}, {64, 16}, {64, 17}, {64, 26}, 
            // // {64, 27}, {64, 28}, {64, 29}, {64, 41}, {64, 42}, 
            // // {64, 43}, {64, 44}, {64, 53}, {64, 54}, {64, 55}, 
            // // {64, 56}, {64, 65}, {64, 66}, {64, 67}, {64, 68},

            // // {63, 8},  {63, 9},  {63, 10}, {63, 11}, {63, 20}, 
            // // {63, 21}, {63, 22}, {63, 23}, {63, 32}, {63, 33}, 
            // // {63, 34}, {63, 35}, {63, 47}, {63, 48}, {63, 49}, 
            // // {63, 50}, {63, 59}, {63, 60}, {63, 61}, {63, 62},



            // {61, 14}, {61, 15}, {61, 16}, {61, 17}, {61, 26}, 
            // {61, 27}, {61, 28}, {61, 29}, {61, 41}, {61, 42}, 
            // {61, 43}, {61, 44}, {61, 53}, {61, 54}, {61, 55}, 
            // {61, 56}, {61, 65}, {61, 66}, {61, 67}, {61, 68},

            // {60, 8},  {60, 9},  {60, 10}, {60, 11}, {60, 20}, 
            // {60, 21}, {60, 22}, {60, 23}, {60, 32}, {60, 33}, 
            // {60, 34}, {60, 35}, {60, 47}, {60, 48}, {60, 49}, 
            // {60, 50}, {60, 59}, {60, 60}, {60, 61}, {60, 62},



            // // {58, 14}, {58, 15}, {58, 16}, {58, 17}, {58, 26}, 
            // // {58, 27}, {58, 28}, {58, 29}, {58, 41}, {58, 42}, 
            // // {58, 43}, {58, 44}, {58, 53}, {58, 54}, {58, 55}, 
            // // {58, 56}, {58, 65}, {58, 66}, {58, 67}, {58, 68},

            // {57, 8},  {57, 9},  {57, 10}, {57, 11}, {57, 20}, 
            // {57, 21}, {57, 22}, {57, 23}, {57, 32}, {57, 33}, 
            // {57, 34}, {57, 35}, {57, 47}, {57, 48}, {57, 49}, 
            // {57, 50}, {57, 59}, {57, 60}, {57, 61}, {57, 62},



            // {55, 14}, {55, 15}, {55, 16}, {55, 17}, {55, 26}, 
            // {55, 27}, {55, 28}, {55, 29}, {55, 41}, {55, 42}, 
            // {55, 43}, {55, 44}, {55, 53}, {55, 54}, {55, 55}, 
            // {55, 56}, {55, 65}, {55, 66}, {55, 67}, {55, 68},

            // {54, 8},  {54, 9},  {54, 10}, {54, 11}, {54, 20}, 
            // {54, 21}, {54, 22}, {54, 23}, {54, 32}, {54, 33}, 
            // {54, 34}, {54, 35}, {54, 47}, {54, 48}, {54, 49}, 
            // {54, 50}, {54, 59}, {54, 60}, {54, 61}, {54, 62},



            // {52, 14}, {52, 15}, {52, 16}, {52, 17}, {52, 26}, 
            // {52, 27}, {52, 28}, {52, 29}, {52, 41}, {52, 42}, 
            // {52, 43}, {52, 44}, {52, 53}, {52, 54}, {52, 55}, 
            // {52, 56}, {52, 65}, {52, 66}, {52, 67}, {52, 68},

            // {51, 8},  {51, 9},  {51, 10}, {51, 11}, {51, 20}, 
            // {51, 21}, {51, 22}, {51, 23}, {51, 32}, {51, 33}, 
            // {51, 34}, {51, 35}, {51, 47}, {51, 48}, {51, 49}, 
            // {51, 50}, {51, 59}, {51, 60}, {51, 61}, {51, 62},



            // {49, 14}, {49, 15}, {49, 16}, {49, 17}, {49, 26}, 
            // {49, 27}, {49, 28}, {49, 29}, {49, 41}, {49, 42}, 
            // {49, 43}, {49, 44}, {49, 53}, {49, 54}, {49, 55}, 
            // {49, 56}, {49, 65}, {49, 66}, {49, 67}, {49, 68},

            // {48, 8},  {48, 9},  {48, 10}, {48, 11}, {48, 20}, 
            // {48, 21}, {48, 22}, {48, 23}, {48, 32}, {48, 33}, 
            // {48, 34}, {48, 35}, {48, 47}, {48, 48}, {48, 49}, 
            // {48, 50}, {48, 59}, {48, 60}, {48, 61}, {48, 62},



            // {46, 14}, {46, 15}, {46, 16}, {46, 17}, {46, 26}, 
            // {46, 27}, {46, 28}, {46, 29}, {46, 41}, {46, 42}, 
            // {46, 43}, {46, 44}, {46, 53}, {46, 54}, {46, 55}, 
            // {46, 56}, {46, 65}, {46, 66}, {46, 67}, {46, 68},

            // {45, 8},  {45, 9},  {45, 10}, {45, 11}, {45, 20}, 
            // {45, 21}, {45, 22}, {45, 23}, {45, 32}, {45, 33}, 
            // {45, 34}, {45, 35}, {45, 47}, {45, 48}, {45, 49}, 
            // {45, 50}, {45, 59}, {45, 60}, {45, 61}, {45, 62},



            // {43, 14}, {43, 15}, {43, 16}, {43, 17}, {43, 26}, 
            // {43, 27}, {43, 28}, {43, 29}, {43, 41}, {43, 42}, 
            // {43, 43}, {43, 44}, {43, 53}, {43, 54}, {43, 55}, 
            // {43, 56}, {43, 65}, {43, 66}, {43, 67}, {43, 68},

            // {42, 8},  {42, 9},  {42, 10}, {42, 11}, {42, 20}, 
            // {42, 21}, {42, 22}, {42, 23}, {42, 32}, {42, 33}, 
            // {42, 34}, {42, 35}, {42, 47}, {42, 48}, {42, 49}, 
            // {42, 50}, {42, 59}, {42, 60}, {42, 61}, {42, 62},



            // // -------------------------------------------------------------------------------------
            // {40, 14}, {40, 15}, {40, 16}, {40, 17}, {40, 26}, 
            // {40, 27}, {40, 28}, {40, 29}, {40, 41}, {40, 42}, 
            // {40, 43}, {40, 44}, {40, 53}, {40, 54}, {40, 55}, 
            // {40, 56}, {40, 65}, {40, 66}, {40, 67}, {40, 68},

            // {39, 8},  {39, 9},  {39, 10}, {39, 11}, {39, 20}, 
            // {39, 21}, {39, 22}, {39, 23}, {39, 32}, {39, 33}, 
            // {39, 34}, {39, 35}, {39, 47}, {39, 48}, {39, 49}, 
            // {39, 50}, {39, 59}, {39, 60}, {39, 61}, {39, 62},



            // {37, 14}, {37, 15}, {37, 16}, {37, 17}, {37, 26}, 
            // {37, 27}, {37, 28}, {37, 29}, {37, 41}, {37, 42}, 
            // {37, 43}, {37, 44}, {37, 53}, {37, 54}, {37, 55}, 
            // {37, 56}, {37, 65}, {37, 66}, {37, 67}, {37, 68},

            // {36, 8},  {36, 9},  {36, 10}, {36, 11}, {36, 20}, 
            // {36, 21}, {36, 22}, {36, 23}, {36, 32}, {36, 33}, 
            // {36, 34}, {36, 35}, {36, 47}, {36, 48}, {36, 49}, 
            // {36, 50}, {36, 59}, {36, 60}, {36, 61}, {36, 62},
            // // -------------------------------------------------------------------------------------



            // {34, 14}, {34, 15}, {34, 16}, {34, 17}, {34, 26}, 
            // {34, 27}, {34, 28}, {34, 29}, {34, 41}, {34, 42}, 
            // {34, 43}, {34, 44}, {34, 53}, {34, 54}, {34, 55}, 
            // {34, 56}, {34, 65}, {34, 66}, {34, 67}, {34, 68},

            // {33, 8},  {33, 9},  {33, 10}, {33, 11}, {33, 20}, 
            // {33, 21}, {33, 22}, {33, 23}, {33, 32}, {33, 33}, 
            // {33, 34}, {33, 35}, {33, 47}, {33, 48}, {33, 49}, 
            // {33, 50}, {33, 59}, {33, 60}, {33, 61}, {33, 62},



            // {31, 14}, {31, 15}, {31, 16}, {31, 17}, {31, 26}, 
            // {31, 27}, {31, 28}, {31, 29}, {31, 41}, {31, 42}, 
            // {31, 43}, {31, 44}, {31, 53}, {31, 54}, {31, 55}, 
            // {31, 56}, {31, 65}, {31, 66}, {31, 67}, {31, 68},

            // {30, 8},  {30, 9},  {30, 10}, {30, 11}, {30, 20}, 
            // {30, 21}, {30, 22}, {30, 23}, {30, 32}, {30, 33}, 
            // {30, 34}, {30, 35}, {30, 47}, {30, 48}, {30, 49}, 
            // {30, 50}, {30, 59}, {30, 60}, {30, 61}, {30, 62},



            // {28, 14}, {28, 15}, {28, 16}, {28, 17}, {28, 26}, 
            // {28, 27}, {28, 28}, {28, 29}, {28, 41}, {28, 42}, 
            // {28, 43}, {28, 44}, {28, 53}, {28, 54}, {28, 55}, 
            // {28, 56}, {28, 65}, {28, 66}, {28, 67}, {28, 68},

            // {27, 8},  {27, 9},  {27, 10}, {27, 11}, {27, 20}, 
            // {27, 21}, {27, 22}, {27, 23}, {27, 32}, {27, 33}, 
            // {27, 34}, {27, 35}, {27, 47}, {27, 48}, {27, 49}, 
            // {27, 50}, {27, 59}, {27, 60}, {27, 61}, {27, 62},



            // {25, 14}, {25, 15}, {25, 16}, {25, 17}, {25, 26}, 
            // {25, 27}, {25, 28}, {25, 29}, {25, 41}, {25, 42}, 
            // {25, 43}, {25, 44}, {25, 53}, {25, 54}, {25, 55}, 
            // {25, 56}, {25, 65}, {25, 66}, {25, 67}, {25, 68},

            // {24, 8},  {24, 9},  {24, 10}, {24, 11}, {24, 20}, 
            // {24, 21}, {24, 22}, {24, 23}, {24, 32}, {24, 33}, 
            // {24, 34}, {24, 35}, {24, 47}, {24, 48}, {24, 49}, 
            // {24, 50}, {24, 59}, {24, 60}, {24, 61}, {24, 62},



            // {22, 14}, {22, 15}, {22, 16}, {22, 17}, {22, 26}, 
            // {22, 27}, {22, 28}, {22, 29}, {22, 41}, {22, 42}, 
            // {22, 43}, {22, 44}, {22, 53}, {22, 54}, {22, 55}, 
            // {22, 56}, {22, 65}, {22, 66}, {22, 67}, {22, 68},

            // {21, 8},  {21, 9},  {21, 10}, {21, 11}, {21, 20}, 
            // {21, 21}, {21, 22}, {21, 23}, {21, 32}, {21, 33}, 
            // {21, 34}, {21, 35}, {21, 47}, {21, 48}, {21, 49}, 
            // {21, 50}, {21, 59}, {21, 60}, {21, 61}, {21, 62},



            // {19, 14}, {19, 15}, {19, 16}, {19, 17}, {19, 26}, 
            // {19, 27}, {19, 28}, {19, 29}, {19, 41}, {19, 42}, 
            // {19, 43}, {19, 44}, {19, 53}, {19, 54}, {19, 55}, 
            // {19, 56}, {19, 65}, {19, 66}, {19, 67}, {19, 68},

            // // {18, 8},  {18, 9},  {18, 10}, {18, 11}, {18, 20}, 
            // // {18, 21}, {18, 22}, {18, 23}, {18, 32}, {18, 33}, 
            // // {18, 34}, {18, 35}, {18, 47}, {18, 48}, {18, 49}, 
            // // {18, 50}, {18, 59}, {18, 60}, {18, 61}, {18, 62},



            // {16, 14}, {16, 15}, {16, 16}, {16, 17}, {16, 26}, 
            // {16, 27}, {16, 28}, {16, 29}, {16, 41}, {16, 42}, 
            // {16, 43}, {16, 44}, {16, 53}, {16, 54}, {16, 55}, 
            // {16, 56}, {16, 65}, {16, 66}, {16, 67}, {16, 68},

            // {15, 8},  {15, 9},  {15, 10}, {15, 11}, {15, 20}, 
            // {15, 21}, {15, 22}, {15, 23}, {15, 32}, {15, 33}, 
            // {15, 34}, {15, 35}, {15, 47}, {15, 48}, {15, 49}, 
            // {15, 50}, {15, 59}, {15, 60}, {15, 61}, {15, 62},



            // // {13, 14}, {13, 15}, {13, 16}, {13, 17}, {13, 26}, 
            // // {13, 27}, {13, 28}, {13, 29}, {13, 41}, {13, 42}, 
            // // {13, 43}, {13, 44}, {13, 53}, {13, 54}, {13, 55}, 
            // // {13, 56}, {13, 65}, {13, 66}, {13, 67}, {13, 68},

            // // {12, 8},  {12, 9},  {12, 10}, {12, 11}, {12, 20}, 
            // // {12, 21}, {12, 22}, {12, 23}, {12, 32}, {12, 33}, 
            // // {12, 34}, {12, 35}, {12, 47}, {12, 48}, {12, 49}, 
            // // {12, 50}, {12, 59}, {12, 60}, {12, 61}, {12, 62},



            // {10, 14}, {10, 15}, {10, 16}, {10, 17}, {10, 26}, 
            // {10, 27}, {10, 28}, {10, 29}, {10, 41}, {10, 42}, 
            // {10, 43}, {10, 44}, {10, 53}, {10, 54}, {10, 55}, 
            // {10, 56}, {10, 65}, {10, 66}, {10, 67}, {10, 68},

            // {9, 8},   {9, 9},   {9, 10},  {9, 11},  {9, 20}, 
            // {9, 21},  {9, 22},  {9, 23},  {9, 32},  {9, 33}, 
            // {9, 34},  {9, 35},  {9, 47},  {9, 48},  {9, 49}, 
            // {9, 50},  {9, 59},  {9, 60},  {9, 61},  {9, 62},


            // without ring road =========================================================================================


            {74, 12},  {74, 13},  {74, 14},  {74, 15},  {74, 24},
            {74, 25},  {74, 26},  {74, 27},  {74, 42},  {74, 43},
            {74, 44},  {74, 45},  {74, 54},  {74, 55},  {74, 56},
            {74, 57},  {74, 66},  {74, 67},  {74, 68},  {74, 69},

            {73, 6},   {73, 7},   {73, 8},   {73, 9},   {73, 18},
            {73, 19},  {73, 20},  {73, 21},  {73, 30},  {73, 31},
            {73, 32},  {73, 33},  {73, 48},  {73, 49},  {73, 50},
            {73, 51},  {73, 60},  {73, 61},  {73, 62},  {73, 63},


            {71, 12},  {71, 13},  {71, 14},  {71, 15},  {71, 24},
            {71, 25},  {71, 26},  {71, 27},  {71, 42},  {71, 43},
            {71, 44},  {71, 45},  {71, 54},  {71, 55},  {71, 56},
            {71, 57},  {71, 66},  {71, 67},  {71, 68},  {71, 69},

            // {70, 6},   {70, 7},   {70, 8},   {70, 9},   {70, 18},
            // {70, 19},  {70, 20},  {70, 21},  {70, 30},  {70, 31},
            // {70, 32},  {70, 33},  {70, 48},  {70, 49},  {70, 50},
            // {70, 51},  {70, 60},  {70, 61},  {70, 62},  {70, 63},


            {68, 12},  {68, 13},  {68, 14},  {68, 15},  {68, 24},
            {68, 25},  {68, 26},  {68, 27},  {68, 42},  {68, 43},
            {68, 44},  {68, 45},  {68, 54},  {68, 55},  {68, 56},
            {68, 57},  {68, 66},  {68, 67},  {68, 68},  {68, 69},

            {67, 6},   {67, 7},   {67, 8},   {67, 9},   {67, 18},
            {67, 19},  {67, 20},  {67, 21},  {67, 30},  {67, 31},
            {67, 32},  {67, 33},  {67, 48},  {67, 49},  {67, 50},
            {67, 51},  {67, 60},  {67, 61},  {67, 62},  {67, 63},


            // {65, 12},  {65, 13},  {65, 14},  {65, 15},  {65, 24},
            // {65, 25},  {65, 26},  {65, 27},  {65, 42},  {65, 43},
            // {65, 44},  {65, 45},  {65, 54},  {65, 55},  {65, 56},
            // {65, 57},  {65, 66},  {65, 67},  {65, 68},  {65, 69},

            // {64, 6},   {64, 7},   {64, 8},   {64, 9},   {64, 18},
            // {64, 19},  {64, 20},  {64, 21},  {64, 30},  {64, 31},
            // {64, 32},  {64, 33},  {64, 48},  {64, 49},  {64, 50},
            // {64, 51},  {64, 60},  {64, 61},  {64, 62},  {64, 63},


            {62, 12},  {62, 13},  {62, 14},  {62, 15},  {62, 24},
            {62, 25},  {62, 26},  {62, 27},  {62, 42},  {62, 43},
            {62, 44},  {62, 45},  {62, 54},  {62, 55},  {62, 56},
            {62, 57},  {62, 66},  {62, 67},  {62, 68},  {62, 69},

            {61, 6},   {61, 7},   {61, 8},   {61, 9},   {61, 18},
            {61, 19},  {61, 20},  {61, 21},  {61, 30},  {61, 31},
            {61, 32},  {61, 33},  {61, 48},  {61, 49},  {61, 50},
            {61, 51},  {61, 60},  {61, 61},  {61, 62},  {61, 63},


            // {59, 12},  {59, 13},  {59, 14},  {59, 15},  {59, 24},
            // {59, 25},  {59, 26},  {59, 27},  {59, 42},  {59, 43},
            // {59, 44},  {59, 45},  {59, 54},  {59, 55},  {59, 56},
            // {59, 57},  {59, 66},  {59, 67},  {59, 68},  {59, 69},

            // {58, 6},   {58, 7},   {58, 8},   {58, 9},   {58, 18},
            // {58, 19},  {58, 20},  {58, 21},  {58, 30},  {58, 31},
            // {58, 32},  {58, 33},  {58, 48},  {58, 49},  {58, 50},
            // {58, 51},  {58, 60},  {58, 61},  {58, 62},  {58, 63},


            {56, 12},  {56, 13},  {56, 14},  {56, 15},  {56, 24},
            {56, 25},  {56, 26},  {56, 27},  {56, 42},  {56, 43},
            {56, 44},  {56, 45},  {56, 54},  {56, 55},  {56, 56},
            {56, 57},  {56, 66},  {56, 67},  {56, 68},  {56, 69},

            {55, 6},   {55, 7},   {55, 8},   {55, 9},   {55, 18},
            {55, 19},  {55, 20},  {55, 21},  {55, 30},  {55, 31},
            {55, 32},  {55, 33},  {55, 48},  {55, 49},  {55, 50},
            {55, 51},  {55, 60},  {55, 61},  {55, 62},  {55, 63},


            // {53, 12},  {53, 13},  {53, 14},  {53, 15},  {53, 24},
            // {53, 25},  {53, 26},  {53, 27},  {53, 42},  {53, 43},
            // {53, 44},  {53, 45},  {53, 54},  {53, 55},  {53, 56},
            // {53, 57},  {53, 66},  {53, 67},  {53, 68},  {53, 69},

            // {52, 6},   {52, 7},   {52, 8},   {52, 9},   {52, 18},
            // {52, 19},  {52, 20},  {52, 21},  {52, 30},  {52, 31},
            // {52, 32},  {52, 33},  {52, 48},  {52, 49},  {52, 50},
            // {52, 51},  {52, 60},  {52, 61},  {52, 62},  {52, 63},


            {50, 12},  {50, 13},  {50, 14},  {50, 15},  {50, 24},
            {50, 25},  {50, 26},  {50, 27},  {50, 42},  {50, 43},
            {50, 44},  {50, 45},  {50, 54},  {50, 55},  {50, 56},
            {50, 57},  {50, 66},  {50, 67},  {50, 68},  {50, 69},

            {49, 6},   {49, 7},   {49, 8},   {49, 9},   {49, 18},
            {49, 19},  {49, 20},  {49, 21},  {49, 30},  {49, 31},
            {49, 32},  {49, 33},  {49, 48},  {49, 49},  {49, 50},
            {49, 51},  {49, 60},  {49, 61},  {49, 62},  {49, 63},


            // {47, 12},  {47, 13},  {47, 14},  {47, 15},  {47, 24}, 
            // {47, 25},  {47, 26},  {47, 27},  {47, 42},  {47, 43}, 
            // {47, 44},  {47, 45},  {47, 54},  {47, 55},  {47, 56}, 
            // {47, 57},  {47, 66},  {47, 67},  {47, 68},  {47, 69},

            // {46, 6},   {46, 7},   {46, 8},   {46, 9},   {46, 18},   
            // {46, 19},  {46, 20},  {46, 21},  {46, 30},  {46, 31}, 
            // {46, 32},  {46, 33},  {46, 48},  {46, 49},  {46, 50}, 
            // {46, 51},  {46, 60},  {46, 61},  {46, 62},  {46, 63},


            {44, 12},  {44, 13},  {44, 14},  {44, 15},  {44, 24}, 
            {44, 25},  {44, 26},  {44, 27},  {44, 42},  {44, 43}, 
            {44, 44},  {44, 45},  {44, 54},  {44, 55},  {44, 56}, 
            {44, 57},  {44, 66},  {44, 67},  {44, 68},  {44, 69},
            
            {43, 6},   {43, 7},   {43, 8},   {43, 9},   {43, 18},   
            {43, 19},  {43, 20},  {43, 21},  {43, 30},  {43, 31}, 
            {43, 32},  {43, 33},  {43, 48},  {43, 49},  {43, 50}, 
            {43, 51},  {43, 60},  {43, 61},  {43, 62},  {43, 63},


            // {41, 12},  {41, 13},  {41, 14},  {41, 15},  {41, 24}, 
            // {41, 25},  {41, 26},  {41, 27},  {41, 42},  {41, 43}, 
            // {41, 44},  {41, 45},  {41, 54},  {41, 55},  {41, 56}, 
            // {41, 57},  {41, 66},  {41, 67},  {41, 68},  {41, 69},

            // {40, 6},   {40, 7},   {40, 8},   {40, 9},   {40, 18},   
            // {40, 19},  {40, 20},  {40, 21},  {40, 30},  {40, 31}, 
            // {40, 32},  {40, 33},  {40, 48},  {40, 49},  {40, 50}, 
            // {40, 51},  {40, 60},  {40, 61},  {40, 62},  {40, 63},


            {38, 12},  {38, 13},  {38, 14},  {38, 15},  {38, 24}, 
            {38, 25},  {38, 26},  {38, 27},  {38, 42},  {38, 43}, 
            {38, 44},  {38, 45},  {38, 54},  {38, 55},  {38, 56}, 
            {38, 57},  {38, 66},  {38, 67},  {38, 68},  {38, 69},

            {37, 6},   {37, 7},   {37, 8},   {37, 9},   {37, 18},   
            {37, 19},  {37, 20},  {37, 21},  {37, 30},  {37, 31}, 
            {37, 32},  {37, 33},  {37, 48},  {37, 49},  {37, 50}, 
            {37, 51},  {37, 60},  {37, 61},  {37, 62},  {37, 63},


            // {35, 12},  {35, 13},  {35, 14},  {35, 15},  {35, 24}, 
            // {35, 25},  {35, 26},  {35, 27},  {35, 42},  {35, 43}, 
            // {35, 44},  {35, 45},  {35, 54},  {35, 55},  {35, 56}, 
            // {35, 57},  {35, 66},  {35, 67},  {35, 68},  {35, 69},
  
            // {34, 6},   {34, 7},   {34, 8},   {34, 9},   {34, 18},   
            // {34, 19},  {34, 20},  {34, 21},  {34, 30},  {34, 31}, 
            // {34, 32},  {34, 33},  {34, 48},  {34, 49},  {34, 50}, 
            // {34, 51},  {34, 60},  {34, 61},  {34, 62},  {34, 63},


            {32, 12},  {32, 13},  {32, 14},  {32, 15},  {32, 24}, 
            {32, 25},  {32, 26},  {32, 27},  {32, 42},  {32, 43}, 
            {32, 44},  {32, 45},  {32, 54},  {32, 55},  {32, 56}, 
            {32, 57},  {32, 66},  {32, 67},  {32, 68},  {32, 69},
  
            {31, 6},   {31, 7},   {31, 8},   {31, 9},   {31, 18},   
            {31, 19},  {31, 20},  {31, 21},  {31, 30},  {31, 31}, 
            {31, 32},  {31, 33},  {31, 48},  {31, 49},  {31, 50}, 
            {31, 51},  {31, 60},  {31, 61},  {31, 62},  {31, 63},


            // {29, 12},  {29, 13},  {29, 14},  {29, 15},  {29, 24}, 
            // {29, 25},  {29, 26},  {29, 27},  {29, 42},  {29, 43}, 
            // {29, 44},  {29, 45},  {29, 54},  {29, 55},  {29, 56}, 
            // {29, 57},  {29, 66},  {29, 67},  {29, 68},  {29, 69},
  
            // {28, 6},   {28, 7},   {28, 8},   {28, 9},   {28, 18},   
            // {28, 19},  {28, 20},  {28, 21},  {28, 30},  {28, 31}, 
            // {28, 32},  {28, 33},  {28, 48},  {28, 49},  {28, 50}, 
            // {28, 51},  {28, 60},  {28, 61},  {28, 62},  {28, 63},


            {26, 12},  {26, 13},  {26, 14},  {26, 15},  {26, 24}, 
            {26, 25},  {26, 26},  {26, 27},  {26, 42},  {26, 43}, 
            {26, 44},  {26, 45},  {26, 54},  {26, 55},  {26, 56}, 
            {26, 57},  {26, 66},  {26, 67},  {26, 68},  {26, 69},
  
            {25, 6},   {25, 7},   {25, 8},   {25, 9},   {25, 18},   
            {25, 19},  {25, 20},  {25, 21},  {25, 30},  {25, 31}, 
            {25, 32},  {25, 33},  {25, 48},  {25, 49},  {25, 50}, 
            {25, 51},  {25, 60},  {25, 61},  {25, 62},  {25, 63},


            // {23, 12},  {23, 13},  {23, 14},  {23, 15},  {23, 24}, 
            // {23, 25},  {23, 26},  {23, 27},  {23, 42},  {23, 43}, 
            // {23, 44},  {23, 45},  {23, 54},  {23, 55},  {23, 56}, 
            // {23, 57},  {23, 66},  {23, 67},  {23, 68},  {23, 69},
  
            // {22, 6},   {22, 7},   {22, 8},   {22, 9},   {22, 18},   
            // {22, 19},  {22, 20},  {22, 21},  {22, 30},  {22, 31}, 
            // {22, 32},  {22, 33},  {22, 48},  {22, 49},  {22, 50}, 
            // {22, 51},  {22, 60},  {22, 61},  {22, 62},  {22, 63},


            {20, 12},  {20, 13},  {20, 14},  {20, 15},  {20, 24}, 
            {20, 25},  {20, 26},  {20, 27},  {20, 42},  {20, 43}, 
            {20, 44},  {20, 45},  {20, 54},  {20, 55},  {20, 56}, 
            {20, 57},  {20, 66},  {20, 67},  {20, 68},  {20, 69},
  
            {19, 6},   {19, 7},   {19, 8},   {19, 9},   {19, 18},   
            {19, 19},  {19, 20},  {19, 21},  {19, 30},  {19, 31}, 
            {19, 32},  {19, 33},  {19, 48},  {19, 49},  {19, 50}, 
            {19, 51},  {19, 60},  {19, 61},  {19, 62},  {19, 63},


            // {17, 12},  {17, 13},  {17, 14},  {17, 15},  {17, 24}, 
            // {17, 25},  {17, 26},  {17, 27},  {17, 42},  {17, 43}, 
            // {17, 44},  {17, 45},  {17, 54},  {17, 55},  {17, 56}, 
            // {17, 57},  {17, 66},  {17, 67},  {17, 68},  {17, 69},
  
            // {16, 6},   {16, 7},   {16, 8},   {16, 9},   {16, 18},   
            // {16, 19},  {16, 20},  {16, 21},  {16, 30},  {16, 31}, 
            // {16, 32},  {16, 33},  {16, 48},  {16, 49},  {16, 50}, 
            // {16, 51},  {16, 60},  {16, 61},  {16, 62},  {16, 63},


            {14, 12},  {14, 13},  {14, 14},  {14, 15},  {14, 24}, 
            {14, 25},  {14, 26},  {14, 27},  {14, 42},  {14, 43}, 
            {14, 44},  {14, 45},  {14, 54},  {14, 55},  {14, 56}, 
            {14, 57},  {14, 66},  {14, 67},  {14, 68},  {14, 69},
  
            {13, 6},   {13, 7},   {13, 8},   {13, 9},   {13, 18},   
            {13, 19},  {13, 20},  {13, 21},  {13, 30},  {13, 31}, 
            {13, 32},  {13, 33},  {13, 48},  {13, 49},  {13, 50}, 
            {13, 51},  {13, 60},  {13, 61},  {13, 62},  {13, 63},


            // {11, 12},  {11, 13},  {11, 14},  {11, 15},  {11, 24}, 
            // {11, 25},  {11, 26},  {11, 27},  {11, 42},  {11, 43}, 
            // {11, 44},  {11, 45},  {11, 54},  {11, 55},  {11, 56}, 
            // {11, 57},  {11, 66},  {11, 67},  {11, 68},  {11, 69},
  
            // {10, 6},   {10, 7},   {10, 8},   {10, 9},   {10, 18},   
            // {10, 19},  {10, 20},  {10, 21},  {10, 30},  {10, 31}, 
            // {10, 32},  {10, 33},  {10, 48},  {10, 49},  {10, 50}, 
            // {10, 51},  {10, 60},  {10, 61},  {10, 62},  {10, 63},


            {8, 12},  {8, 13},  {8, 14},  {8, 15},  {8, 24}, 
            {8, 25},  {8, 26},  {8, 27},  {8, 42},  {8, 43}, 
            {8, 44},  {8, 45},  {8, 54},  {8, 55},  {8, 56}, 
            {8, 57},  {8, 66},  {8, 67},  {8, 68},  {8, 69},
  
            {7, 6},   {7, 7},   {7, 8},   {7, 9},   {7, 18},   
            {7, 19},  {7, 20},  {7, 21},  {7, 30},  {7, 31}, 
            {7, 32},  {7, 33},  {7, 48},  {7, 49},  {7, 50}, 
            {7, 51},  {7, 60},  {7, 61},  {7, 62},  {7, 63},


            // {5, 12},  {5, 13},  {5, 14},  {5, 15},  {5, 24}, 
            // {5, 25},  {5, 26},  {5, 27},  {5, 42},  {5, 43}, 
            // {5, 44},  {5, 45},  {5, 54},  {5, 55},  {5, 56}, 
            // {5, 57},  {5, 66},  {5, 67},  {5, 68},  {5, 69},
  
            {4, 6},   {4, 7},   {4, 8},   {4, 9},   {4, 18},   
            {4, 19},  {4, 20},  {4, 21},  {4, 30},  {4, 31}, 
            {4, 32},  {4, 33},  {4, 48},  {4, 49},  {4, 50}, 
            {4, 51},  {4, 60},  {4, 61},  {4, 62},  {4, 63},


            {2, 12},  {2, 13},  {2, 14},  {2, 15},  {2, 24}, 
            {2, 25},  {2, 26},  {2, 27},  {2, 42},  {2, 43}, 
            {2, 44},  {2, 45},  {2, 54},  {2, 55},  {2, 56}, 
            {2, 57},  {2, 66},  {2, 67},  {2, 68},  {2, 69},
  
            {1, 6},   {1, 7},   {1, 8},   {1, 9},   {1, 18},   
            {1, 19},  {1, 20},  {1, 21},  {1, 30},  {1, 31}, 
            {1, 32},  {1, 33},  {1, 48},  {1, 49},  {1, 50}, 
            {1, 51},  {1, 60},  {1, 61},  {1, 62},  {1, 63},
        };

        // int spawnNum = 1;
        int spawnNum = spawnSpots.GetUpperBound(0);

        int robotCount = 0;
        for (int i = 0; i < spawnNum + 1; i++){
            GameObject AMR = (GameObject) Instantiate(robot, new Vector3(spawnSpots[i,1], spawnSpots[i,0], -20), Quaternion.identity);
            AMR.GetComponent<RobotMovement>().Initialize(i, server, new int[] {spawnSpots[i,0], spawnSpots[i,1]});
            robotCount ++;
        }
        server.displayRobotCount(robotCount);

        QualitySettings.vSyncCount = 0;
        Application.targetFrameRate = 200;
    }

        // float[] test1 = moveInCurve(server.getCurve(8), 90, 0);
        // Debug.Log("test1: " + test1[0] + " " + test1[1]);
        // Instantiate(robot, new Vector3(test1[0], test1[1], -20), Quaternion.identity);

        // float[] test2 = moveInCurve(server.getCurve(8), 72, 0);
        // Debug.Log("test2: " + test2[0] + " " + test2[1]);
        // Instantiate(robot, new Vector3(test2[0], test2[1], -20), Quaternion.identity);

        // float[] test3 = moveInCurve(server.getCurve(8), 54, 0);
        // Debug.Log("test3: " + test3[0] + " " + test3[1]);
        // Instantiate(robot, new Vector3(test3[0], test3[1], -20), Quaternion.identity);

        // float[] test4 = moveInCurve(server.getCurve(8), 36f, 0);
        // Debug.Log("test4: " + test4[0] + " " + test4[1]);
        // Instantiate(robot, new Vector3(test4[0], test4[1], -20), Quaternion.identity);

        // float[] test5 = moveInCurve(server.getCurve(8), 18, 0);
        // Debug.Log("test5: " + test5[0] + " " + test5[1]);
        // Instantiate(robot, new Vector3(test5[0], test5[1], -20), Quaternion.identity);

        // float[] test6 = moveInCurve(server.getCurve(8), 0, 0);
        // Debug.Log("test6: " + test6[0] + " " + test6[1]);
        // Instantiate(robot, new Vector3(test6[0], test6[1], -20), Quaternion.identity);

        // float[] test7 = moveInCurve(server.getCurve(63), 90, 0);
        // Debug.Log("test7: " + test7[0] + " " + test7[1]);
        // Instantiate(robot, new Vector3(test7[0], test7[1], -20), Quaternion.identity);
        // float[] test8 = moveInCurve(server.getCurve(63), 72, 0);
        // Debug.Log("test8: " + test8[0] + " " + test8[1]);
        // Instantiate(robot, new Vector3(test8[0], test8[1], -20), Quaternion.identity);
        // float[] test9 = moveInCurve(server.getCurve(63), 54, 0);
        // Debug.Log("test9: " + test9[0] + " " + test9[1]);
        // Instantiate(robot, new Vector3(test9[0], test9[1], -20), Quaternion.identity);
        // float[] test10 = moveInCurve(server.getCurve(63), 36f, 0);
        // Debug.Log("test10: " + test10[0] + " " + test10[1]);
        // Instantiate(robot, new Vector3(test10[0], test10[1], -20), Quaternion.identity);
        // float[] test11 = moveInCurve(server.getCurve(63), 18, 0);
        // Debug.Log("test11: " + test11[0] + " " + test11[1]);
        // Instantiate(robot, new Vector3(test11[0], test11[1], -20), Quaternion.identity);
        // float[] test12 = moveInCurve(server.getCurve(63), 0, 0);
        // Debug.Log("test12: " + test12[0] + " " + test12[1]);
        // Instantiate(robot, new Vector3(test12[0], test12[1], -20), Quaternion.identity);

        // float[] test1 = moveInCurve(server.getCurve(145), 270, 0);
        // Debug.Log("test1: " + test1[0] + " " + test1[1]);
        // Instantiate(robot, new Vector3(test1[0], test1[1], -20), Quaternion.identity);
        // float[] test2 = moveInCurve(server.getCurve(145), 252, 0);
        // Debug.Log("test2: " + test2[0] + " " + test2[1]);
        // Instantiate(robot, new Vector3(test2[0], test2[1], -20), Quaternion.identity);
        // float[] test3 = moveInCurve(server.getCurve(145), 234, 0);
        // Debug.Log("test3: " + test3[0] + " " + test3[1]);
        // Instantiate(robot, new Vector3(test3[0], test3[1], -20), Quaternion.identity);
        // float[] test4 = moveInCurve(server.getCurve(145), 216, 0);
        // Debug.Log("test4: " + test4[0] + " " + test4[1]);
        // Instantiate(robot, new Vector3(test4[0], test4[1], -20), Quaternion.identity);
        // float[] test5 = moveInCurve(server.getCurve(145), 198, 0);
        // Debug.Log("test5: " + test5[0] + " " + test5[1]);
        // Instantiate(robot, new Vector3(test5[0], test5[1], -20), Quaternion.identity);
        // float[] test6 = moveInCurve(server.getCurve(145), 180, 0);
        // Debug.Log("test6: " + test6[0] + " " + test6[1]);
        // Instantiate(robot, new Vector3(test6[0], test6[1], -20), Quaternion.identity);

        // float[] test7 = moveInCurve(server.getCurve(173), 270, 0);
        // Debug.Log("test7: " + test7[0] + " " + test7[1]);
        // Instantiate(robot, new Vector3(test7[0], test7[1], -20), Quaternion.identity);
        // float[] test8 = moveInCurve(server.getCurve(173), 252, 0);
        // Debug.Log("test8: " + test8[0] + " " + test8[1]);
        // Instantiate(robot, new Vector3(test8[0], test8[1], -20), Quaternion.identity);
        // float[] test9 = moveInCurve(server.getCurve(173), 234, 0);
        // Debug.Log("test9: " + test9[0] + " " + test9[1]);
        // Instantiate(robot, new Vector3(test9[0], test9[1], -20), Quaternion.identity);
        // float[] test10 = moveInCurve(server.getCurve(173), 216, 0);
        // Debug.Log("test10: " + test10[0] + " " + test10[1]);
        // Instantiate(robot, new Vector3(test10[0], test10[1], -20), Quaternion.identity);
        // float[] test11 = moveInCurve(server.getCurve(173), 198, 0);
        // Debug.Log("test11: " + test11[0] + " " + test11[1]);
        // Instantiate(robot, new Vector3(test11[0], test11[1], -20), Quaternion.identity);
        // float[] test12 = moveInCurve(server.getCurve(173), 180, 0);
        // Debug.Log("test12: " + test12[0] + " " + test12[1]);
        // Instantiate(robot, new Vector3(test12[0], test12[1], -20), Quaternion.identity);

        // float[] test7 = moveInCurve(server.getCurve(4), 45, 0);
        // Debug.Log("test7: " + test7[0] + " " + test7[1]);
        // Instantiate(robot, new Vector3(test7[0], test7[1], -20), Quaternion.identity);

        // float[] test8 = moveInCurve(server.getCurve(2), 292.5f, 0);
        // Debug.Log("test8: " + test8[0] + " " + test8[1]);
        // Instantiate(robot, new Vector3(test8[0], test8[1], -20), Quaternion.identity);

        // float[] test9 = moveInCurve(server.getCurve(2), 270f, 0);
        // Debug.Log("test9: " + test9[0] + " " + test9[1]);
        // Instantiate(robot, new Vector3(test9[0], test9[1], -20), Quaternion.identity);

        // Instantiate(robot, new Vector3(74f, 5.5f, -20), Quaternion.identity);
        // Instantiate(robot, new Vector3(70f, 2f, -20), Quaternion.identity);
        // Instantiate(robot, new Vector3(74f, 6f, -20), Quaternion.identity);
        // Instantiate(robot, new Vector3(70.5f, 5.5f, -20), Quaternion.identity);
        // Instantiate(robot, new Vector3(70f, 6f, -20), Quaternion.identity);


        // Debug.Log("71 70");
        // MoveGrid vertex = (server.findVertex(new int []{71, 70}) as MoveGrid);
        // for(int i = 0; i < vertex.getEdge().Count; i++){
        //     Debug.Log("Next vertex: " + vertex.getEdge()[i].getNextVertex().getLabel()[0] + " " + vertex.getEdge()[i].getNextVertex().getLabel()[1]);
        // }


        // Debug.Log("70 71");
        // vertex = (server.findVertex(new int []{70, 71}) as MoveGrid);
        // for(int i = 0; i < vertex.getEdge().Count; i++){
        //     Debug.Log("Next vertex: " + vertex.getEdge()[i].getNextVertex().getLabel()[0] + " " + vertex.getEdge()[i].getNextVertex().getLabel()[1]);
        // }

    // private float[] moveInCurve(Curve curve, float angle, float robotSpeed){
    //     angle = (float)(angle / 180 * Math.PI);
    //     float[] curveCenter = curve.getCenter();
    //     float curveRadius = curve.getRadius();
    //     float posX = curveCenter[1] + (float)Mathf.Cos(angle) * curveRadius;
    //     float posY = curveCenter[0] + (float)Mathf.Sin(angle) * curveRadius;
    //     return new float[]{posX, posY};
    // }

}
